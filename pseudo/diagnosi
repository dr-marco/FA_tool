def EspressioneRegolare(OssSpace):
	create listRoutes as copy of OssSpace.listRoutes
	create listNodes as coppy of OssSpace.listNodes
	create initial_node as copy of OssSpace.initial_node
	
	if initial_node is present in route in listRoutes as finish_node
		create new_initial_node
		set new_initial_node.isFinal as True
		
		create new_route as <new_initial_node, 'empty', initial_node>
		
		add new_initial_node to listNodes
		add new_route to listRoutes
		
		update initial_node with new_initial_node
		
	create final_node
	set final_node.isFinal as True
	
	create count_acept as count(node in  listNodes where isFinal is True)
	if count_acept > 2 or (count_acept is 1 and exist route in listRoutes as start_node is node in listNodes where isFinal is True and start_node is not finish_node:
		foreach node in  listNodes where isFinal is True:
			create new_route as <node, 'empty', final_node>
			add new_route to listRoutes
		
	while listRoutes has more than 1 element:
		if exist sequence [<n,r_1, n_1>, <n_1,r_2,n_2>,...,<n_(k-1), r_k, n'>] of routes in listRoutes where all node n_i have only the sequence routes :
			remove sequence routes in listRoutes
			add new_route as <n, concat(r_i), n') to listRoutes
		elif exist routes with same n as start_node and n' as finish_node:
			remove sequence routes in listRoutes
			add new_route as <n, concat(routes, '|'), n') to listRoutes
		else:
			take n from listNodes with n is not initial_node and n is not the final_node
			for all routes as <n', r', n> where finish_node is n:
				for all routes as <n, r'', n'> where start_node is n:
					if exist route as <n,r,n> where star_node and finish_node are n:
						add new_route as <n', r'(r*)r'', n''> to listRoutes
					else
						add new_route as <n', r'r'', n''> to listRoutes
				
			remove n from listNodes
			remove routes from listRoutes where n is start_node or finish_node
	
	return listRoutes
