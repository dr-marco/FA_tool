GEN_SPAZIO_OSS(Rete, ListaOss):
	
	listaFA= []
	listaLINK = []
	indiceOss = 0
	
	foreach FA in Rete.listaFA:
		listaFA.add(FA)
	foreach LINK in Rete.listaLINK:
		listaLINK.add(LINK)
	
	const nodoInitSpazio = <listaFA, listaLINK, indiceOss>
	
	listaNodi = []
	listaTratte = []
	
	listaNodi.add(nodoInitSpazio)
	
	
	tailNodi = []
	tailNodi.add(listaNodi[0])
	
	id = 0
	while tailNodi is not empty:
		nodoCurr = tailNodi[0]
		
		foreach FA in nodo.listaFA:
			foreach trans in FA.stato #controlliamo le transizioni che hanno come 				StatoPartenza FA.stato
				if transEnable(trans, nodoCurr.listaLink):
					tupleCheck = checkTransOss(trans, ListaOss, nodoCurr.indice)
					# tupleCheck value 1 = se si può fare la transizione checkTransOss
					# tupleCHeck value 2 = se bisogna incrementare l'indice
					if !tupleCheck.value1: #if is the right OSS
						break
							
					nodoToAdd = cambioStato(trans, nodoCurr, tupleCheck.value2)
					listaFregne.add(<nodoCurr, trans, nodoToAdd>)
					
					if nodoToAdd is not in listaNodi:
						
						listaNodi.add(nodoToAdd)
						tailNodi.push(nodoToAdd)
						
						toAdd = True
						foreach LINK in nodoToAdd.listaLINK:
							if LINK.contenuto is not NULL :
								toAdd = False
								break
						if toAdd == True and nodoToAdd.indice == len(ListaOss):	
							nodoToAdd.isFinal = True
							
		
		tailNodi.pop()
	
	listaNodiFinaliTemp = copy(listaNodi  if isFinal == True)
	
	#POTATURA
	foreach nodoFinal in listaNodiFinaliTemp:
		black = BFS(listaNodi, listaFregne, nodoFinal)
		listaNodiFinaliTemp.remove(nodi in black)
	
	#ETICHETTATURA
	foreach nodo in listaNodi:
		id = id + 1
		nodo.id = id
	
	Spazio spazio = new Spazio(statoIniziale, listaStatiFinali, listaNodi, listaFregne)
	return spazio
	#TODO nella struttura aggiungere status listaNodi per dire se è finale #TODO
	
def transEnable(transizione, listaLink):
	linkTrans = transizione.eventolink.link
	if linkTrans in listaLink:
		LINK = listaLink.get(linkTrans)
		eventoTrans = transizione.eventolink.evento
		if LINK.contenuto == eventoTrans:
			return True
	return False
	
def cambioStato(transizione, nodo, toIncrement):
	linkTrans = transizione.eventolink.link
	eventoTrans = transizione.eventolink.evento
	
	LINK = nodo.listaLink.get(linkTrans)
	LINK.contenuto = eventoTrans
	
	statoTrans = transizione.statoPartenza
	stato = nodo.listaFA.get(statoTrans)
	stato = transizione.statoUscita
	
	if toIncrement:
		nodo.indiceOss += 1
	
	return nodo
	
	
def checkTransOss(transizione, indice, listaOss):
	if transazioni.labelOss.value is in listaOss: 
		if transazini.labelOss.value != listaOss[indice]
			return (False, False)
		else:
			return (True, True)
	else:
		if transazioni.labelOss ! None:
			return (False, False)
		else:
			return (True, False)
			
	
def BFS(listaFregne, listaNodi, statoFinal):
	grigi = []
	black = []
	
	grigi.add(statoFinal)
	
	q = None
	q.enqueue(statoFinal)
	
	while q is not empty:
		nodo = q.dequeue()
		foreach t in listaFregne.find(dest==nodo):
			if t.part is not in grigi and is not black
				q.enqueue = t.part
				grigi.add(t.part)
		
		black.add(nodo)
		grigi.remove(nodo)
			
	return black
	
