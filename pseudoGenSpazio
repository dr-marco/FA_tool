GEN_SPAZIO(Rete):
	
	listaFA = []
	listaLINK = []
	
	foreach FA in Rete.listaFA:
		listaFA.add(FA)
	foreach LINK in Rete.listaLINK:
		listaLINK.add(LINK)
	
	nodoInitSpazio = <listaFA, listaLINK>
	nodoInitSpazio.isFinal = True
	
	listaNodi = []
	listaTratte = []
	
	listaNodi.add(nodoInitSpazio)
	
	tailNodi = []
	tailNodi.add(listaNodi[0])
	
	id = 0
	while tailNodi is not empty:
		nodoCurr = tailNodi[0]
		
		foreach FA in nodo.listaFA:
			foreach trans in FA.stato #controlliamo le transizioni che hanno come StatoPartenza FA.stato
				if transEnable(trans, nodoCurr.listaLink):
					nodoToAdd = cambioStato(trans, nodoCurr)
					listaFregne.add(<nodoCurr, trans, nodoToAdd>)
					
					if nodoToAdd is not in listaNodi:
						listaNodi.add(nodoToAdd)
						tailNodi.push(nodoToAdd)
						
						toAdd = True
						foreach LINK in nodoToAdd.listaLINK:
							if LINK.contenuto is not NULL:
								toAdd = False
								break
						if toAdd == True	
							nodoToAdd.isFinal = True
							
		
		tailNodi.pop()
	listaNodiFinaliTemp = copy(listaNodi if isFinal == True)
	
	foreach nodoFinal in listaNodiFinaliTemp:
		black = BFS(listaNodi, listaFregne, nodoFinal)
		listaNodiFinaliTemp.remove(nodi in black)
	
	foreach nodo in listaNodi:
		id = id + 1
		nodo.id = id
	
	Spazio spazio = new Spazio(nodoInitSpazio, listaNodi, listaTratte)
	return spazio
	#TODO nella struttura aggiungere status listaNodi per dire se Ã¨ finale #TODO

def transEnable(transizione, listaLink):
	linkTrans = transizione.eventolink.link
	if linkTrans in listaLink:
		LINK = listaLink.get(linkTrans)
		eventoTrans = transizione.eventolink.evento
		if LINK.contenuto == eventoTrans:
			return True
	return False
	
def cambioStato(transizione, nodo):
	linkTrans = transizione.eventolink.link
	eventoTrans = transizione.eventolink.evento
	
	LINK = nodo.listaLink.get(linkTrans)
	LINK.contenuto = eventoTrans
	
	statoTrans = transizione.statoPartenza
	stato = nodo.listaFA.get(statoTrans)
	stato = transizione.statoUscita
	
	return nodo
	
def BFS(listaFregne, listaNodi, statoFinal):
	grigi = []
	black = []
	
	grigi.add(statoFinal)
	
	q = None
	q.enqueue(statoFinal)
	
	while q is not empty:
		nodo = q.dequeue()
		foreach t in listaFregne.find(dest==nodo):
			if t.part is not in grigi and is not black
				q.enqueue = t.part
				grigi.add(t.part)
		
		black.add(nodo)
		grigi.remove(nodo)
			
	return black
	
---------------------------------------------------------------------------------------------




